% Solve a Clustering Problem with a Self-Organizing Map
% Script generated by Neural Clustering app
% Created 19-Jan-2017 16:10:07
%
%% INITIALISATION
tidy;

[dn,ds] = loadnames('macros',chooseplatform);
indx=48;

load(strcat(dn,ds(1:end-1),'_GT',filesep,'man00',num2str(indx),'.mat'));
[XREAL,xxa] = readParseInput(strcat(dn,ds,filesep,'man00',num2str(indx),'.tif'));
Xedge = edge(XREAL(:,:,2),'canny',[],1);

GT = dataBin;

X = dataBin>0;
Xr = X(:,:,1);
Xg = X(:,:,2);
[M,N] = size(Xg);

%% BUILD OWN S.O.M Network 

whichClump = 2;
mainthresh = 150;
offsetVar = 7;
statsfname = 'max';

[nuclei,clumps] = simpleClumpsSegmentation(double(X));
[boundies, clumpStr] = getOverlappingClumpsBoundaries(clumps, nuclei);
[angleMatrix,thisBoundy, numPoints] = computeAngleMatrix(boundies,whichClump);
[candies, candieshandles] = computeCandidatePoints(angleMatrix, ...
    thisBoundy, mainthresh, offsetVar, statsfname);

thisClump=clumpStr.overlappingClumps==whichClump;

%% Create dataIn here!

levs = multithresh(XREAL(:,:,2),2);

dataIntensities = bitor((XREAL(:,:,2)>levs(2)).*thisClump, ...
    bwperim(thisClump)).*XREAL(:,:,2);

%dataIntensities = (XREAL(:,:,2)>levs(2)).*thisClump.*XREAL(:,:,2);

[xx, yy] = find(dataIntensities>0);

%testKij = diag(XREAL(xx,yy,1));
testKij = cat(2,diag(XREAL(xx,yy,1)),diag(XREAL(xx,yy,2)));

dataIn = [xx yy testKij];

figure(2)
imagesc(dataIntensities);
%% This script assumes these variables are defined:
%
%   dataIn - input data.

x = dataIn';

% Create a Self-Organizing Map
dimension1 = 10;
dimension2 = 10;
net = selforgmap([dimension1 dimension2],500,5,'hextop','dist');

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
 net.plotFcns = {'plotsomtop','plotsomnc','plotsomnd', ...
     'plotsomplanes', 'plotsomhits', 'plotsompos'};

% Train the Network
[net,tr] = train(net,x);

%% Test the Network
y = net(x);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotsomtop(net)
%figure, plotsomnc(net)
%figure, plotsomnd(net)
%figure, plotsomplanes(net)
%figure, plotsomhits(net,x)
%figure, plotsompos(net,x)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
